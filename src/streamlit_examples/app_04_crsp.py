"""Streamlit demo that focuses on the CRSP-derived excerpt generated via doit."""

from __future__ import annotations

from pathlib import Path
from typing import Iterable

import sys

import numpy as np
import pandas as pd
import plotly.graph_objects as go
import streamlit as st


ROOT = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(ROOT))

from settings import config  # noqa: E402

DATA_DIR = Path(config("DATA_DIR"))
EXCERPT_PATH = DATA_DIR / "crsp_streamlit_excerpt.csv"
PERIODS_PER_YEAR = 12

st.set_page_config(
    page_title="CRSP Dashboard Snapshot",
    page_icon="ðŸ“ˆ",
    layout="wide",
)


@st.cache_data(show_spinner=False)
def load_excerpt(path: Path = EXCERPT_PATH) -> pd.DataFrame:
    if not path.exists():
        raise FileNotFoundError(
            f"Expected CRSP excerpt at {path}. Run `doit pull_crsp_data` first."
        )
    df = pd.read_csv(path, parse_dates=["date"])
    df = df.sort_values(["ticker", "date"])
    return df


def pivot_prices(df: pd.DataFrame) -> pd.DataFrame:
    wide = df.pivot(index="date", columns="ticker", values="price")
    return wide.sort_index()


def pivot_returns(df: pd.DataFrame) -> pd.DataFrame:
    wide = df.pivot(index="date", columns="ticker", values="return")
    return wide.sort_index()


def compute_metrics(prices: pd.DataFrame) -> pd.DataFrame:
    returns = prices.pct_change().dropna(how="all")
    ann_ret = (1 + returns).prod() ** (PERIODS_PER_YEAR / len(returns)) - 1
    ann_vol = returns.std() * np.sqrt(PERIODS_PER_YEAR)
    sharpe = ann_ret / ann_vol.replace({0: np.nan})
    latest_cap = prices.iloc[-1]

    metrics = pd.DataFrame(
        {
            "Annual Return": ann_ret,
            "Annual Volatility": ann_vol,
            "Sharpe Ratio": sharpe,
            "Last Price": latest_cap,
        }
    )
    return metrics.sort_values("Annual Return", ascending=False)


def build_price_chart(prices: pd.DataFrame, tickers: Iterable[str]) -> go.Figure:
    normalized = prices[tickers] / prices[tickers].iloc[0]
    fig = go.Figure()
    for ticker in tickers:
        fig.add_trace(
            go.Scatter(
                x=normalized.index,
                y=normalized[ticker],
                mode="lines",
                name=ticker,
            )
        )
    fig.update_layout(
        title="Growth of $1",
        xaxis_title="Date",
        yaxis_title="Growth",
        template="plotly_white",
        legend=dict(orientation="h", yanchor="bottom", y=-0.25),
    )
    return fig


def build_return_chart(returns: pd.DataFrame, tickers: Iterable[str]) -> go.Figure:
    fig = go.Figure()
    for ticker in tickers:
        fig.add_trace(
            go.Histogram(
                x=returns[ticker].dropna(),
                name=ticker,
                opacity=0.6,
                nbinsx=40,
            )
        )
    fig.update_layout(
        title="Distribution of Monthly Returns",
        xaxis_title="Return",
        yaxis_title="Frequency",
        barmode="overlay",
        template="plotly_white",
        legend=dict(orientation="h", yanchor="bottom", y=-0.25),
    )
    return fig


def render_sidebar(tickers: Iterable[str]) -> list[str]:
    st.sidebar.header("Configuration")
    selection = st.sidebar.multiselect(
        "Select tickers",
        options=list(tickers),
        default=list(tickers)[:3],
    )
    if not selection:
        st.sidebar.warning("Select at least one ticker to continue.")
        selection = list(tickers)[:1]
    st.sidebar.info("Data source: doit âžœ build_crsp_data.py")
    return selection


def main() -> None:
    try:
        excerpt = load_excerpt()
    except FileNotFoundError as exc:
        st.error(str(exc))
        st.stop()

    prices = pivot_prices(excerpt)
    returns = pivot_returns(excerpt)

    selection = render_sidebar(prices.columns)

    st.title("CRSP Monthly Snapshot")
    st.caption(
        "This app reads the CRSP excerpt generated by the doit pipeline. "
        "Use it as a template for integrating WRDS pulls into your dashboards."
    )

    metrics = compute_metrics(prices[selection])
    st.subheader("Summary Metrics")
    st.dataframe(
        metrics.style.format(
            {
                "Annual Return": "{:.1%}",
                "Annual Volatility": "{:.1%}",
                "Sharpe Ratio": "{:.2f}",
                "Last Price": "${:,.2f}",
            }
        )
    )

    tab_price, tab_returns = st.tabs(["Growth", "Return Distribution"])

    with tab_price:
        st.plotly_chart(build_price_chart(prices, selection), width="stretch")
    with tab_returns:
        st.plotly_chart(build_return_chart(returns, selection), width="stretch")
        st.markdown(
            "Monthly returns come directly from the WRDS pull. Use this tab to spot skew, "
            "volatility clusters, or other features that might inform your modeling choices."
        )


if __name__ == "__main__":
    main()
